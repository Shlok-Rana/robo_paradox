{"version":3,"sources":["components/card-component.jsx","components/card-list.component.jsx","components/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monsu","id","key","name","email","CardList","monster","map","mon","SearchBox","placeholder","handlechange","type","onChange","App","handleChange","e","setState","searchD","target","value","state","monsters","fetch","then","response","json","users","this","filteredmonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAEaA,G,kBAAM,SAACC,GACnB,OAAQ,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,MAAMC,GAAtC,uBACR,wBAAIC,IAAKL,EAAMG,MAAMC,IAAKJ,EAAMG,MAAMG,MACtC,4BAAKN,EAAMG,MAAMI,UCHVC,EAAU,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aACbD,EAAMS,QAAQC,KAAI,SAAAC,GAAG,OAAG,kBAAC,EAAD,CAAMR,MAAOQ,SCD7BC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACpB,2BACCC,KAAK,SACLd,UAAU,SACVY,YAAaA,EACbG,SAAUF,MCuCAG,E,kDAvCb,aACC,IAAD,8BACE,gBAeHC,aAAc,SAACC,GACd,EAAKC,SAAS,CAACC,QAAUF,EAAEG,OAAOC,SAfhC,EAAKC,MAAO,CACVC,SAAW,GACXJ,QAAS,IAJb,E,gEAUC,IAAD,OACEK,MAAM,8CACNC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAChC,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAAUK,S,+BAQpC,IAAD,EAC+BC,KAAKP,MAA1BC,EADV,EACUA,SAASJ,EADnB,EACmBA,QACXW,EAAkBP,EAASQ,QAAO,SAAAxB,GAAO,OAC7CA,EAAQH,KAAK4B,cAAcC,SAASd,EAAQe,wBAC9C,OACE,yBAAKnC,UAAU,OACb,8CACA,kBAAC,EAAD,CAAWY,YAAY,kBACvBC,aAAciB,KAAKb,eACnB,kBAAC,EAAD,CAAUT,QAASuB,S,GAhCTK,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6091dd22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card-styles.css';\r\nexport const Card= (props) => {\r\n return  <div className='card-container'>\r\n      <img src={`https://robohash.org/${props.monsu.id}.png?size=200x200`}/>\r\n      <h2 key={props.monsu.id}>{props.monsu.name}</h2>\r\n      <h3>{props.monsu.email}</h3>\r\n  </div>\r\n};","import React from 'react';\r\nimport './card-list.css';\r\nimport {Card} from './card-component.jsx';\r\nexport const CardList= props => (\r\n   <div className='card-list'>\r\n    {props.monster.map(mon =><Card monsu={mon}/> )}\r\n    </div>\r\n  \r\n);\r\n  \r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox =({ placeholder , handlechange }) => (\r\n    <input \r\n     type=\"search\" \r\n     className='search'\r\n     placeholder={placeholder} \r\n     onChange={handlechange}\r\n    />\r\n);\r\n","import React from 'react';\n\nimport './App.css';\nimport {CardList} from './components/card-list.component.jsx'\nimport {SearchBox } from './components/search-box.component.jsx';\n\n\n\nclass App extends React.Component {\n  constructor()\n  {\n    super();\n    this.state= {\n      monsters : [],\n      searchD: ''\n    }\n   \n   \n  }\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users').\n    then(response=> response.json()).then\n    (users => this.setState({monsters: users}));\n  }\n\n handleChange= (e) => {\n  this.setState({searchD : e.target.value});\n }\n\n  render()\n  {\n    const { monsters,searchD } = this.state;\n    const filteredmonsters= monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchD.toLocaleLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Robots paradox</h1>\n        <SearchBox placeholder='search monsters' \n        handlechange={this.handleChange}/>\n        <CardList monster={filteredmonsters}/>\n        \n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}